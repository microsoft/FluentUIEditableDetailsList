{"version":3,"file":"runGridValidations.worker-7058d8d9.js","sources":["../src/libs/editablegrid/workers/runGridValidations.worker.js"],"sourcesContent":["self.onmessage = function (event) {\r\n  const {\r\n    messages,\r\n    defaultGridDataTmp,\r\n    indentiferColumn,\r\n    props,\r\n    ignoredColProperties,\r\n    MessageBarType,\r\n    DepColTypes,\r\n  } = event.data;\r\n\r\n  let localError = false;\r\n  const msgMap = new Map(messages);\r\n\r\n\r\n  const tmpInsertToMessageMap = (key, value) => {\r\n    msgMap.set(key, value);\r\n  };\r\n\r\n  function findDuplicates(array) {\r\n    const duplicates = [];\r\n    const seen = {};\r\n\r\n    const makeEverythingAString = array.map((obj) => {\r\n      const convertedObj = {};\r\n      for (const key in obj) {\r\n        if (obj[key] == null || obj[key] == undefined) convertedObj[key] = \"\";\r\n        else {\r\n          convertedObj[key] = String(obj[key]).toLowerCase();\r\n        }\r\n      }\r\n      return convertedObj;\r\n    });\r\n    const ignoredProperties = [...ignoredColProperties]\r\n\r\n\r\n    if (indentiferColumn !== null && indentiferColumn !== undefined) {\r\n      ignoredProperties.push(indentiferColumn);\r\n    }\r\n\r\n    if (props.customOperationsKey) {\r\n      ignoredProperties.push(props.customOperationsKey.colKey);\r\n    }\r\n\r\n    if (props.customKeysToAddOnNewRow) {\r\n      for (\r\n        let index = 0;\r\n        index < props.customKeysToAddOnNewRow.length;\r\n        index++\r\n      ) {\r\n        const element = props.customKeysToAddOnNewRow[index];\r\n        if ((element.useKeyWhenDeterminingDuplicatedRows ?? false) == true)\r\n          ignoredProperties.push(element.key);\r\n      }\r\n    }\r\n\r\n    let key = \"\";\r\n\r\n    makeEverythingAString.forEach((row, index) => {\r\n      if (defaultGridDataTmp?.[0]) {\r\n        key = JSON.stringify(\r\n          Object.entries(row)\r\n            .filter(([prop]) => Object.keys(defaultGridDataTmp[0]).includes(prop))\r\n            .filter(([prop]) =>\r\n              props.columns.map((obj) => obj.key).includes(prop)\r\n            )\r\n            .filter(([prop]) => !ignoredProperties.includes(prop))\r\n            .sort()\r\n        );\r\n\r\n        if (seen[key]) {\r\n          // Duplicate row found\r\n          indentiferColumn !== null && indentiferColumn !== undefined\r\n            ? seen[key].ids.push(row[indentiferColumn])\r\n            : seen[key].ids.push(index);\r\n        } else {\r\n          if (indentiferColumn !== null && indentiferColumn !== undefined) {\r\n            seen[key] = {\r\n              index: duplicates.length,\r\n              ids: [row[indentiferColumn]],\r\n            };\r\n            duplicates.push(seen[key].ids);\r\n          } else {\r\n            seen[key] = { index: duplicates.length, ids: [index] };\r\n            duplicates.push(seen[key].ids);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return duplicates\r\n      .filter((ids) => ids.length > 1)\r\n      .map((ids) => ids.sort((a, b) => a - b));\r\n  }\r\n\r\n  //Duplicate Rows Check\r\n  const duplicates = findDuplicates(defaultGridDataTmp);\r\n  if (duplicates.length > 0) {\r\n    duplicates.forEach((dups, index) => {\r\n      var msg =\r\n        indentiferColumn !== null && indentiferColumn !== undefined\r\n          ? `Rows Located At IDs: ${dups} are duplicated`\r\n          : `Rows Located At Indexes ${dups} are duplicated`;\r\n\r\n      tmpInsertToMessageMap(\"dups\" + index, {\r\n        msg: msg,\r\n        type: MessageBarType.error,\r\n      });\r\n    });\r\n\r\n    localError = true;\r\n  }\r\n\r\n  for (let row = 0; row < defaultGridDataTmp.length; row++) {\r\n    const gridData = defaultGridDataTmp[row];\r\n    var elementColNames = Object.keys(gridData);\r\n    let emptyCol = [];\r\n    let emptyReqCol = [];\r\n    for (\r\n      let indexInner = 0;\r\n      indexInner < elementColNames.length;\r\n      indexInner++\r\n    ) {\r\n      const colNames = elementColNames[indexInner];\r\n      const rowCol = gridData[colNames];\r\n      const currentCol = props.columns.filter((x) => x.key === colNames);\r\n\r\n      // ValidDataTypeCheck\r\n      for (let j = 0; j < currentCol.length; j++) {\r\n        const element = currentCol[j];\r\n        const rowCol = gridData[element.key];\r\n\r\n        if (\r\n          element.required &&\r\n          typeof element.required == \"boolean\" &&\r\n          (rowCol == null ||\r\n            rowCol == undefined ||\r\n            rowCol?.toString().length <= 0 ||\r\n            (rowCol == \"\" && element.dataType != \"number\"))\r\n        ) {\r\n          if (!emptyCol.includes(\" \" + element.name))\r\n            emptyCol.push(\" \" + element.name);\r\n        } else if (\r\n          typeof element.required !== \"boolean\" &&\r\n          !element.required.requiredOnlyIfTheseColumnsAreEmpty &&\r\n          element.required.errorMessage &&\r\n          (rowCol == null ||\r\n            rowCol == undefined ||\r\n            rowCol?.toString().length <= 0 ||\r\n            (rowCol == \"\" && element.dataType != \"number\"))\r\n        ) {\r\n          var msg =\r\n            `Row ${\r\n              indentiferColumn\r\n                ? \"With ID: \" + gridData[indentiferColumn]\r\n                : \"With Index:\" + row + 1\r\n            } - ` + `${element.required.errorMessage}'.`;\r\n          tmpInsertToMessageMap(element.key + row + \"empty\", {\r\n            msg: msg,\r\n            type: MessageBarType.error,\r\n          });\r\n        } else if (\r\n          typeof element.required !== \"boolean\" &&\r\n          element.required.requiredOnlyIfTheseColumnsAreEmpty &&\r\n          (rowCol == null ||\r\n            rowCol == undefined ||\r\n            rowCol?.toString().length <= 0 ||\r\n            (rowCol == \"\" && element.dataType != \"number\"))\r\n        ) {\r\n          const checkKeys =\r\n            element.required.requiredOnlyIfTheseColumnsAreEmpty.colKeys;\r\n          let skippable = false;\r\n          for (let index = 0; index < checkKeys.length; index++) {\r\n            const columnKey = checkKeys[index];\r\n            const str = gridData[columnKey];\r\n\r\n            if (element.required.alwaysRequired) {\r\n              if (\r\n                str == null ||\r\n                str == undefined ||\r\n                str?.toString().length <= 0 ||\r\n                (str == \"\" && element.dataType != \"number\")\r\n              ) {\r\n                if (element.required.errorMessage) {\r\n                  var msg =\r\n                    `Row ${\r\n                      indentiferColumn\r\n                        ? \"With ID: \" + gridData[indentiferColumn]\r\n                        : \"With Index:\" + row + 1\r\n                    } - ` + `${element.required.errorMessage}'.`;\r\n                  tmpInsertToMessageMap(element.key + row + \"empty\", {\r\n                    msg: msg,\r\n                    type: MessageBarType.error,\r\n                  });\r\n                } else if (!emptyReqCol.includes(\" \" + element.name)) {\r\n                  emptyReqCol.push(\" \" + element.name);\r\n                  break;\r\n                }\r\n              }\r\n            } else {\r\n              if (\r\n                (str || str?.toString()?.trim() == \"0\") &&\r\n                str?.toString().length > 0\r\n              ) {\r\n                skippable = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (!emptyReqCol.includes(\" \" + element.name) && skippable == false) {\r\n            if (!element.required.errorMessage)\r\n              emptyReqCol.push(\" \" + element.name);\r\n            else {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } - ` + `${element.required.errorMessage}'.`;\r\n              tmpInsertToMessageMap(element.key + row + \"empty\", {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        if (\r\n          rowCol !== null &&\r\n          (typeof rowCol !== element.dataType || typeof rowCol === \"number\")\r\n        ) {\r\n          if (element.dataType === \"number\") {\r\n            if (rowCol && isNaN(parseInt(rowCol)) && rowCol !== \"\") {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } Col: ${element.name} - ` +\r\n                `Value is not a '${element.dataType}'.`;\r\n              tmpInsertToMessageMap(element.key + row, {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n\r\n              localError = true;\r\n            } else if (\r\n              element.validations &&\r\n              element.validations.numberBoundaries\r\n            ) {\r\n              const min = element.validations.numberBoundaries.minRange;\r\n              const max = element.validations.numberBoundaries.maxRange;\r\n\r\n              if (min && max) {\r\n                if (!(min <= parseInt(rowCol) && max >= parseInt(rowCol))) {\r\n                  var msg =\r\n                    `Row ${\r\n                      indentiferColumn\r\n                        ? \"With ID: \" + gridData[indentiferColumn]\r\n                        : \"With Index:\" + row + 1\r\n                    } Col: ${element.name} - ` +\r\n                    `Value outside of range '${min} - ${max}'. Entered value ${rowCol}`;\r\n                  tmpInsertToMessageMap(element.key + row, {\r\n                    msg: msg,\r\n                    type: MessageBarType.error,\r\n                  });\r\n\r\n                  localError = true;\r\n                }\r\n              } else if (min) {\r\n                if (!(min <= parseInt(rowCol))) {\r\n                  var msg =\r\n                    `Row ${\r\n                      indentiferColumn\r\n                        ? \"With ID: \" + gridData[indentiferColumn]\r\n                        : \"With Index:\" + row + 1\r\n                    } Col: ${element.name} - ` +\r\n                    `Value is lower than required range: '${min}'. Entered value ${rowCol}`;\r\n                  tmpInsertToMessageMap(element.key + row, {\r\n                    msg: msg,\r\n                    type: MessageBarType.error,\r\n                  });\r\n\r\n                  localError = true;\r\n                }\r\n              } else if (max) {\r\n                if (!(max >= parseInt(rowCol))) {\r\n                  var msg =\r\n                    `Row ${\r\n                      indentiferColumn\r\n                        ? \"With ID: \" + gridData[indentiferColumn]\r\n                        : \"With Index:\" + row + 1\r\n                    } Col: ${element.name} - ` +\r\n                    `Value is greater than required range: '${max}'. Entered value ${rowCol}`;\r\n                  tmpInsertToMessageMap(element.key + row, {\r\n                    msg: msg,\r\n                    type: MessageBarType.error,\r\n                  });\r\n\r\n                  localError = true;\r\n                }\r\n              }\r\n            }\r\n          } else if (element.dataType === \"boolean\") {\r\n            try {\r\n              Boolean(rowCol);\r\n            } catch (error) {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } Col: ${element.name} - ` +\r\n                `Value is not a '${element.dataType}'.`;\r\n              tmpInsertToMessageMap(element.key + row, {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n\r\n              localError = true;\r\n            }\r\n          } else if (element.dataType === \"date\") {\r\n            try {\r\n              if (!isValidDate(rowCol)) {\r\n                throw {};\r\n              } else {\r\n                continue;\r\n              }\r\n            } catch (error) {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } Col: ${element.name} - ` +\r\n                `Value is not a '${element.dataType}'.`;\r\n              tmpInsertToMessageMap(element.key + row, {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n\r\n              localError = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (element.validations && element.validations.columnDependent) {\r\n          for (\r\n            let index = 0;\r\n            index < element.validations.columnDependent.length;\r\n            index++\r\n          ) {\r\n            const colDep = element.validations.columnDependent[index];\r\n\r\n            if (\r\n              gridData[colDep.dependentColumnKey] ||\r\n              gridData[colDep.dependentColumnKey] !== undefined\r\n            ) {\r\n              const str = gridData[colDep.dependentColumnKey];\r\n              let skip = false;\r\n\r\n              if (\r\n                colDep.skipCheckIfTheseColumnsHaveData &&\r\n                colDep.skipCheckIfTheseColumnsHaveData.colKeys\r\n              ) {\r\n                for (const skipForKey of colDep.skipCheckIfTheseColumnsHaveData\r\n                  .colKeys) {\r\n                  if (colDep.skipCheckIfTheseColumnsHaveData?.partial) {\r\n                    const str = gridData[skipForKey];\r\n                    if (\r\n                      str &&\r\n                      str !== null &&\r\n                      str !== undefined &&\r\n                      str?.toString().length > 0\r\n                    ) {\r\n                      skip = true;\r\n                      break;\r\n                    }\r\n                  } else {\r\n                    const str = gridData[skipForKey];\r\n                    if (\r\n                      str &&\r\n                      str !== null &&\r\n                      str !== undefined &&\r\n                      str?.toString().length > 0\r\n                    ) {\r\n                      skip = true;\r\n                    } else {\r\n                      skip = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (!skip) {\r\n                if (str !== undefined && str !== null) {\r\n                  if (\r\n                    str?.toString().length > 0 &&\r\n                    colDep.type === DepColTypes.MustBeEmpty\r\n                  ) {\r\n                    if (rowCol !== null && rowCol?.toString().length > 0) {\r\n                      var msg =\r\n                        `Row ${\r\n                          indentiferColumn\r\n                            ? \"With ID: \" + gridData[indentiferColumn]\r\n                            : \"With Index:\" + row + 1\r\n                        } - ` +\r\n                        (colDep.errorMessage ??\r\n                          `Data cannot be entered in ${element.name} and in ${colDep.dependentColumnName} Column. Remove data in ${colDep.dependentColumnName} Column to enter data here.`);\r\n\r\n                      tmpInsertToMessageMap(row + \"ColDep\", {\r\n                        msg: msg,\r\n                        type: MessageBarType.error,\r\n                      });\r\n\r\n                      localError = true;\r\n                    }\r\n                  }\r\n                }\r\n                if (\r\n                  (str == undefined ||\r\n                    str == null ||\r\n                    (str == \"\" && element.dataType != \"number\") ||\r\n                    (str && str?.toString().length <= 0)) &&\r\n                  colDep.type === DepColTypes.MustHaveData\r\n                ) {\r\n                  var msg =\r\n                    `Row ${\r\n                      indentiferColumn\r\n                        ? \"With ID: \" + gridData[indentiferColumn]\r\n                        : \"With Index:\" + row + 1\r\n                    } - ` +\r\n                    (colDep.errorMessage ??\r\n                      ` Data needs to entered in ${colDep.dependentColumnName} and in ${element.name} Column.`);\r\n\r\n                  tmpInsertToMessageMap(row + \"ColDep\", {\r\n                    msg: msg,\r\n                    type: MessageBarType.error,\r\n                  });\r\n                  localError = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (element.validations && element.validations.regexValidation) {\r\n          for (\r\n            let index = 0;\r\n            index < element.validations.regexValidation.length;\r\n            index++\r\n          ) {\r\n            const data = element.validations.regexValidation[index];\r\n            if (!data.regex.test(rowCol)) {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } - ` + `${data.errorMessage}`;\r\n              tmpInsertToMessageMap(element.key + row, {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n\r\n              localError = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (element.validations && element.validations.stringValidations) {\r\n          const caseInsensitive =\r\n            element.validations.stringValidations.caseInsensitive;\r\n          if (caseInsensitive) {\r\n            if (\r\n              rowCol !== null &&\r\n              element.validations.stringValidations?.conditionCantEqual?.toLowerCase() ===\r\n                rowCol?.toString().toLowerCase()\r\n            ) {\r\n              var msg =\r\n                `Row ${\r\n                  indentiferColumn\r\n                    ? \"With ID: \" + gridData[indentiferColumn]\r\n                    : \"With Index:\" + row + 1\r\n                } - ` + `${element.validations.stringValidations?.errMsg}`;\r\n              tmpInsertToMessageMap(element.key + row, {\r\n                msg: msg,\r\n                type: MessageBarType.error,\r\n              });\r\n\r\n              localError = true;\r\n            } else {\r\n              if (\r\n                rowCol !== null &&\r\n                element.validations.stringValidations?.conditionCantEqual ===\r\n                  rowCol?.toString()\r\n              ) {\r\n                var msg =\r\n                  `Row ${\r\n                    indentiferColumn\r\n                      ? \"With ID: \" + gridData[indentiferColumn]\r\n                      : \"With Index:\" + row + 1\r\n                  } - ` + `${element.validations.stringValidations?.errMsg}`;\r\n                tmpInsertToMessageMap(element.key + row, {\r\n                  msg: msg,\r\n                  type: MessageBarType.error,\r\n                });\r\n\r\n                localError = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyReqCol.length > 1) {\r\n      var msg = `Row ${\r\n        indentiferColumn\r\n          ? \"With ID: \" + gridData[indentiferColumn]\r\n          : \"With Index:\" + row + 1\r\n      } - ${emptyReqCol} cannot all be empty`;\r\n\r\n      tmpInsertToMessageMap(row + \"erc\", {\r\n        msg: msg,\r\n        type: MessageBarType.error,\r\n      });\r\n\r\n      localError = true;\r\n    } else if (emptyReqCol.length == 1) {\r\n      var msg = `Row: ${\r\n        indentiferColumn ? \"With ID: \" + gridData[indentiferColumn] : row + 1\r\n      } - ${emptyReqCol} cannot be empty`;\r\n\r\n      tmpInsertToMessageMap(row + \"erc\", {\r\n        msg: msg,\r\n        type: MessageBarType.error,\r\n      });\r\n\r\n      localError = true;\r\n    }\r\n\r\n    if (emptyCol.length > 1) {\r\n      var msg = `Row ${\r\n        indentiferColumn\r\n          ? \"With ID: \" + gridData[indentiferColumn]\r\n          : \"With Index: \" + row + 1\r\n      } - ${emptyCol?.toString()} cannot be empty at all`;\r\n\r\n      tmpInsertToMessageMap(row + \"ec\", {\r\n        msg: msg,\r\n        type: MessageBarType.error,\r\n      });\r\n\r\n      localError = true;\r\n    } else if (emptyCol.length == 1) {\r\n      var msg = `Row ${\r\n        indentiferColumn\r\n          ? \"With ID: \" + gridData[indentiferColumn]\r\n          : \"With Index: \" + row + 1\r\n      } - ${emptyCol?.toString()} cannot be empty`;\r\n\r\n      tmpInsertToMessageMap(row + \"ec\", {\r\n        msg: msg,\r\n        type: MessageBarType.error,\r\n      });\r\n\r\n      localError = true;\r\n    }\r\n  }\r\n\r\n  self.postMessage({ isError: localError, messages: msgMap });\r\n  self.close();\r\n};\r\n"],"names":["duplicates","key","msg","str"],"mappings":"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"}