import {
  ConstrainMode,
  IButtonStyles,
  ICommandBarItemProps,
  ICommandBarStyleProps,
  ICommandBarStyles,
  IDetailsList,
  IDetailsListProps,
  IDialogContentStyleProps,
  IDialogContentStyles,
  IDialogProps,
  IPanelStyleProps,
  IPanelStyles,
  IRefObject,
  IScrollablePaneStyleProps,
  IScrollablePaneStyles,
  IStyleFunctionOrObject,
} from "@fluentui/react";
import { IColumnConfig } from "./columnconfigtype";
import { IGridCopy } from "./gridcopytype";
import { IRowAddWithValues } from "./rowaddtype";
import { GridToastTypes } from "./gridToastTypes";

export type IContentScrollablePaneStyleProps =
  Partial<IScrollablePaneStyleProps> & {
    scrollablePaneOffsetHeight?: number;
    scrollablePaneContentOffsetHeight?: number;
  };

export type IEnableMessageBarErrors = {
  enableShowErrors: boolean;
  enableSendGroupedErrorsToCallback?: boolean;
};

export type IUserDefinedOperationKey = {
  colKey: string;
  options: {
    None: string | number;
    Add: string | number;
    Update: string | number;
    Delete: string | number;
  };
};

export type IRenameCommandBarItemsActions = {
  AddRow?: string;
  AddRowWithData?: string;
  BulkEdit?: string;
  CopyGrid?: string;
  CSVExport?: string;
  DeleteRow?: string;
  EditMode?: string;
  Editing?: string;
  ExcelExport?: string;
  Export?: string;
  Filter?: string;
  ImportFromExcel?: string;
  PasteIntoGrid?: string;
  ResetData?: {
    actionTitle: string;
    dialogBox?: { title: string; msg: string };
  };
  SaveEdits?: string;
};

export type ICustomKeysToAddOnNewRow = {
  key: string;
  defaultValue: string | number | boolean | bigint | null;
  ignoreKeyWhenDeterminingBlankRows?: boolean;
  useKeyWhenDeterminingDuplicatedRows?: boolean;
};

export interface EditableGridProps extends IDetailsListProps {
  /** Clears All Messages Generated By The Grid*/
  clearAllGridMessages?: [
    boolean,
    React.Dispatch<React.SetStateAction<boolean>>
  ];

    /**
     * No pasting is allowed into non-editable fields, toggle to allow
     * @default false*/
  allowPastingIntoNonEditableFields?: boolean

  /** Triggers the onGridUpdate callback on component mount and data initialization    */
  triggerOnGridUpdateOnMount?: boolean

  /** Trigggers onGridUpdate callback - non async */
  triggerOnGridUpdateCallbackWhenOnGridFilteredIsCalled?: boolean

  /** Shows In Command Bar - Permanently shows a save button in the command bar*/
  showASaveButtonInCommandbar?: boolean;
  /** If `customOperationsKey` is enabled. This Key/Column will be updated with what operation has been preformed. `(Add, Delete, Updated, None)` */
  customOperationsKey?: IUserDefinedOperationKey;

  /**
   * EditRowPanel: Call to provide customized styling that will layer on top of the variant rules.
   */
  editPanelStyles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;

  /**
   * AddRowPanelStyles: Call to provide customized styling that will layer on top of the variant rules.
   */
  addRowPanelStyles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;

  /**
   * Callback to access the IDetailsList interface. Use this instead of ref for accessing
   * the public methods and properties of the component.
   */
  componentRef: React.RefObject<IDetailsList>;

  /** If `customKeysToAddOnNewRow` is enabled. These Keys/Columns won't be updated, but they will added and assigned the default value given when creating a new row` */
  customKeysToAddOnNewRow?: ICustomKeysToAddOnNewRow[];

  /** Actions to preform before the grid save process starts */
  onBeforeGridSave?: (updatedItems: any) => void;

  /** Changes the default msg given if you have  `enableSendGroupedErrorsToCallback` set to true on save grid*/
  customGroupedMsgError?: string;
  /** Determines if a panel is shown for adding new rows is shown or done in grid*/
  enableInlineGridAdd?: boolean;

  /** sets the min width for the actions column*/
  actionsColumnMinWidth?: number;

  /** Shows in Grid Column, Removes The Actions Column If True */
  disableAllRowActions?: boolean;
  id: number;

  /**
   * Where is the grid located, i.e "Period 3 Aug". Neccessary if you have multiple grids on one page
   */
  gridLocation: string;

  /** Message to display when the grid has no data. Example: `this grid is empty` */
  zeroRowsMsg?: string;

  /** Returns a button to save the grid, along with if validations are in error */
  GridSaveAction?: (save: () => () => Promise<boolean>) => void;

  /** Sets the color + styles of the icons in the Actions Column */
  actionIconStylesInGrid?: IButtonStyles;

  items: any[];
  columns: IColumnConfig[];

  /** Sets the color + styles of the commandbar above the grid */
  commandBarStyles?: IStyleFunctionOrObject<
    ICommandBarStyleProps,
    ICommandBarStyles
  >;

  /** Shows In Command Bar - Allows Users To Export An CSV Of The Data - If Excel Export Is Selected As Well This Two Will Combine */
  enableCSVExport?: boolean;

  /** Shows In Command Bar - Show Excel Export Option - If CSV Export Is Selected As Well This Two Will Combine -- Use onExcelExport to override what happens with this action  */
  enableExcelExport?: boolean;

  /** Shows In Command Bar - Show Excel Import Option -- Use onExcelImport to override what happens with this action
   * @deprecated It works but needs to be updated to account for key/value pairs in dropdowns and combo boxes
   */
  enableExcelImport?: boolean;

  /** Change The File Name of File On Export Excel, CSV, etc. */
  exportFileName?: string;

  /** Shows In Actions Grid Column - Show The Ablity To Delete One Row Which The Button Is Located */
  enableRowEditDelete?: boolean;

  /** Shows In Actions Grid Column - Show The Ablity To Edit One Row Which The Button Is Located */
  enableRowEdit?: boolean;

  /** Shows In Row Edit Column When `enableRowEdit` Is True & The User Selects A Row To Edit, By Clicking On The Icon
   *   -this the allows the user the ablity to cancel `enablerowedit` after selection. */
  enableRowEditCancel?: boolean;

  /** Shows In Command Bar - Allows Users To Select A Row, Then Chose Which Column They Wish To Update*/
  enableColumnEdit?: boolean;

  /** Shows In Command Bar - Allows Users To Select Multiple Rows & Then Update All The Data For Them At Once. If a user selects two rows
   * and wishes to update the name column to be "Bing mvc", those two rows the user selected will now have "Bing mvc" for their name columns
   */
  enableBulkEdit?: boolean;

  /** Shows Nowhere - Allows Users To Double Click A Single Cell & Edit That One Only, Saves After User Presses Enter In Cell. If False when user double click, the whole row is editable*/
  enableSingleCellEditOnDoubleClick?: boolean;

  /** Shows Nowhere - Puts all rows in edit mode when a cell is clicked to be edited*/
  enableEditAllOnCellClick?: boolean;

  /** If true the user cannot double click or single click to edit a row */
  disableInlineCellEdit?: boolean;

  /** Callback for when a row is selected/unselected */
  onGridSelectionChange?: any;

  /** Callback for when the grid is mount and the data is process in the grid's interal state*/
  onDataInternallyInitialized?: (InitializedData: any[]) => void;

  /** Callback for when the grid data/items are updated */
  onGridUpdate?: (internalGridData: any[]) => Promise<void>;

  /** Removes the internal properties from the updated data `onGridUpdate` callback for `internalGridData`
   * @default false
   */
  ignoreInternalPropertiesOnGridUpdateCallback?: boolean;

  /** Returns the rows/data for when the grid is filter by column or by entirety. When there is no data in the grid at all, filterData is null  */
  onGridFiltered?: (filterData: any[] | null) => void;

  /** Callback for when the grid is saved */
  onGridSave?: (internalGridData: any, updatedItems: any) => void;

  /** Removed 'Commit Changes' button.
   * Saves the grid state during every value change, if false will only save state when the user presses commit
   */
  enableSaveGridOnCellValueChange?: boolean;

  /** Shows In Command Bar - Allows Users To Select Multiple Rows & Then Delete Them*/
  enableGridRowsDelete?: boolean;

  /** Shows In Command Bar - Allows Users To Add Their Specified Number, Empty, No Data, Rows To Grid */
  enableGridRowsAdd?: boolean;

  /** Shows In Command Bar - Allows Users To Add Their Specified Number Of Rows To Grid With Validated Data */
  enableGridRowAddWithValues?: IRowAddWithValues;

  /** Shows In Command Bar - Allows Users To Put The Entire Grid In Inline Edit Mode */
  enableEditMode?: boolean;

  /** Shows In Command Bar ONLY IF 'enableEditMode' Is Active - Allows Users To Cancel The Inline Edit Mode */
  enableEditModeCancel?: boolean;

  /** @deprecated  */
  enablePagination?: boolean;

  /** @deprecated  */
  pageSize?: number;

  /** Callback for Excel Export */
  onExcelExport?: any;

  /** Callback for Excel Import */
  onExcelImport?: any;

  /** Height Of The Grid */
  height?: string | number;

  /** Sets the styles of the scrollbars for the grid */
  scrollablePaneStyles?: IStyleFunctionOrObject<
    IContentScrollablePaneStyleProps,
    IScrollablePaneStyles
  >;

  /** Sets the styles of the dialog boxes used for the grid */
  dialogProps?: {
    props?: IDialogProps;
    dialogContentStyles?: IStyleFunctionOrObject<
      IDialogContentStyleProps,
      IDialogContentStyles
    >;
  };

  /** Width Of The Grid */
  width?: string | number;

  /** Position Type */
  position?: string;
  constrainMode?: ConstrainMode;

  /** Shows In Command Bar - Allows Users To Reset Data Option - Resets Data To Intial Before Any Changes, Fresh Data */
  enableGridReset?: boolean;

  /** Shows In Command Bar - Allows Users To Add Filter Queries. For example, sort by column a then by column b based on this value */
  enableColumnFilterRules?: boolean;

  /** Shows In Grid Header - Allows Users To Click On Column & Filter Data In Column */
  enableColumnFilters?: boolean;

  /** Hides CommandBar So, You Just See The Grid -- All CommandBar Actions Disabled */
  enableCommandBar?: boolean;

  /** Callback for messages that the grid produces during updates, errors, etc. */
  onGridStatusMessageCallback?: (msg: string, type: GridToastTypes) => void;

  /** Shows Errors in Message Bar, for Errors that are longer then 5 words or dependent columns errors */
  enableMessageBarErrors?: IEnableMessageBarErrors;

  /** Callback after grid is save and validations have ran, to report if the grid reporting any errors that were violation of basic validations */
  onGridInErrorCallback?: any;

  /** Contains options & functionality dealing with Copy & Paste for the grid */
  gridCopyOptions?: IGridCopy;

  /** Permanently Puts The Grid In Inline Edit Mode - **Advise Against Unless Warranted** */
  enableDefaultEditMode?: boolean;

  /** Permanently Puts The Grid In Inline Edit Mode with Save & Cancel only present - **Advise Against Unless Warranted** */
  enableDefaultEditModeWithCommandButtons?: boolean;

  /** Prop to use to add custom commandbar items to the commandbar above the grid */
  customCommandBarItems?: ICommandBarItemProps[];

  /** Prop to use to add custom commandbar items to the commandbar above the grid in the overflow section */
  customCommandBarOverflowItems?: ICommandBarItemProps[];

  /** Use to rename the actions you see in the command bar */
  renameCommandBarItemsActions?: IRenameCommandBarItemsActions;
}
